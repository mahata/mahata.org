<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 大事なものは目に見えない</title>
    <link>https://blog.mahata.org/post/</link>
    <description>Recent content in Posts on 大事なものは目に見えない</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 15 Jun 2017 20:43:11 +0900</lastBuildDate>
    
	<atom:link href="https://blog.mahata.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>スナップショットから作成した EBS ボリュームをマウントする</title>
      <link>https://blog.mahata.org/post/attach-and-mount-ebs-volume-created-by-snapshot/</link>
      <pubDate>Thu, 15 Jun 2017 20:43:11 +0900</pubDate>
      
      <guid>https://blog.mahata.org/post/attach-and-mount-ebs-volume-created-by-snapshot/</guid>
      <description>この記事では EBS ボリュームのスナップショットを、新しい EC2 インスタンスでマウントする方法について記述する。すでに EBS ボリュームのスナップショットは作成されていると仮定する。まだであれば、ひとつ前の記事を参照してほしい。
AWS コンソールでぽちぽちと新しい EC2 インスタンスを作成し、途中の &amp;ldquo;Add Storage&amp;rdquo; のプロセスで /dev/sdf 辺りに前述の記事で作成したスナップショットIDを使ってボリュームを追加するとしよう。
最終的に作成されたインスタンスに ssh でログインし、lsblk を実行すると次のように表示される。ブロックデバイスは認識されているものの、マウントされていないことがわかる。
## /dev/xvdf はアタッチされているが、マウントされていない (MOUNTPOINT が空) ## (lsblk の NAME は &amp;quot;/dev/&amp;quot; が省略される) $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk └─xvda1 202:1 0 8G 0 part / xvdf 202:80 0 512G 0 disk ## ちなみに xvdf は /dev/sdf のエイリアス $ ls -l /dev/sdf lrwxrwxrwx 1 root root 4 Jun 14 08:16 /dev/sdf -&amp;gt; xvdf ## /dev/xvdf にファイルシステムは存在することを確認する (ない場合は mkfs を使う) $ sudo file -s /dev/xvdf /dev/xvdf: Linux rev 1.</description>
    </item>
    
    <item>
      <title>AWS CLI で EBS のスナップショットを作成する</title>
      <link>https://blog.mahata.org/post/create-ebs-snapshot/</link>
      <pubDate>Thu, 15 Jun 2017 20:08:07 +0900</pubDate>
      
      <guid>https://blog.mahata.org/post/create-ebs-snapshot/</guid>
      <description>この記事は AWS CLI で EBS のスナップショットを作成するためのメモだ。
正直なところ、何も難しいことはない。ボリューム ID が &amp;ldquo;vol-xxxxxxxx&amp;rdquo; の EBS ボリュームのバックアップを取るなら aws ec2 create-snapshot --volume-id vol-xxxxxxxx --description &amp;quot;My Backup&amp;quot; とすればいいだけだ。
ただし、create-snapshot はオプションが少なく、スナップショットの作成と同時にタグ付ができない。例えば、スナップショットの Name タグを &amp;ldquo;MySnapshot&amp;rdquo; とし、Cost を タグを &amp;ldquo;MyService&amp;rdquo; としたければ、create-tags コマンドを別に叩く必要がある。
create-snapshot は作成するスナップショットの情報を JSON で STDOUT に出力する。この JSON にはスナップショット ID の情報も含まれているので、次のようにすることで目的の処理を達成できる。
$ SnapshotId=$(aws ec2 create-snapshot --volume-id vol-xxxxxxx --description &amp;quot;MySnapshot&amp;quot;) | jq -r .SnapshotId) $ aws ec2 create-tags --resources $SnapshotId --tags Key=Cost,Value=MyService Key=Name,Value=MySnapshot  なお、AWS では EBS ボリュームのスナップショットを連続で作成した場合、後から作られるスナップショットは前回のスナップショットからの増分スナップショットになる。</description>
    </item>
    
    <item>
      <title>*nix が wait 絡みのデッドロックを防ぐ仕組み</title>
      <link>https://blog.mahata.org/post/ruby-prevent-deadlock/</link>
      <pubDate>Wed, 14 Jun 2017 22:11:57 +0900</pubDate>
      
      <guid>https://blog.mahata.org/post/ruby-prevent-deadlock/</guid>
      <description>引き続き「Working With Unix Processes」を読んでいる。
サンプルで「デッドロックが起こりそう だけど、起こらない」コードが掲載されていた。次のスニペットは、そのサンプルを少し書き換えたものだ。
#!/usr/bin/env ruby # ふたつの子プロセスをつくり、すぐに殺す 2.times do fork do abort &amp;quot;おしまい&amp;quot; end end # 最初の子プロセスを待ち、その後は3秒ほど寝る # 寝ている間にもうひとつの子プロセスも終了する puts Process.wait sleep 3 # もう子プロセスは終了しているので、これはデッドロックするはずでは? =&amp;gt; 実際はしない puts Process.wait  コードのコメントに書いた通りなのだが、最後の Process.wait はデッドロックになっても不思議ではない&amp;hellip; けど、実際にはデッドロックにならない。
カーネルには exit したプロセスの情報をキューに詰めておく機構があり、親プロセスは死んだ子プロセスの順にその情報を取得できる。だから、サンプルでの最後の Process.wait は実際には子プロセスの終了を待つのではなく、キューから「既に死んだ」子プロセスの情報を取得している。
ただ、子プロセスが存在しない「かつ」前述のキューにもデータが存在しないとき、Process.wait は Errno::ECHILD 例外を起こす。
まあ、それはそうだよね。</description>
    </item>
    
    <item>
      <title>Ruby 2.0 (or later) の CoW</title>
      <link>https://blog.mahata.org/post/ruby-gc-cow/</link>
      <pubDate>Tue, 13 Jun 2017 19:16:35 +0900</pubDate>
      
      <guid>https://blog.mahata.org/post/ruby-gc-cow/</guid>
      <description>「Working With Unix Processes」を読んでいる。
これによると、Ruby (MRI) では 2.0 まで CoW (Copy on Write) が実装されていなかったそうだ。理由は Ruby の GC がナイーブなマーク・アンド・スイープであったから、らしい。
バージョン 1.9 までの Ruby は、マークのタイミングでオブジェクト内に直接「使用中」フラグを立てていたそうだ。つまり、オブジェクトに変更を加えることになるので、このタイミングでオブジェクトのコピーが発生してしまう。
バージョン 2.0 からは、マーク・アンド・スイープのために専用のメモリ領域をつくるので、マークのタイミングでオブジェクト自身を変更する必要はない。これなら CoW を機能させることができる。
なるほどなあ。</description>
    </item>
    
    <item>
      <title>Gradle で &#34;Failed to load native library &#39;libnative-platform.so&#39; for Linux amd64.&#34; と言われるときの対処</title>
      <link>https://blog.mahata.org/post/gradle-says-libnative-platform-failure/</link>
      <pubDate>Tue, 30 May 2017 21:55:39 +0900</pubDate>
      
      <guid>https://blog.mahata.org/post/gradle-says-libnative-platform-failure/</guid>
      <description>gradle build をして、次のようなエラーに遭遇した:
FAILURE: Build failed with an exception. * What went wrong: Failed to load native library &#39;libnative-platform.so&#39; for Linux amd64. * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  いかにも何か依存パッケージが足りていないようなエラーメッセージだ。検索してみると「libstdc++ をインストールすると解決するよ」という記事も実際に存在する。
僕も libstdc++ をインストールしてみたが、問題は解決しなかった。実際には ~/.gradle に root 権限でディレクトリが作られてしまっていたことが問題であった。単に ~/.gradle/* を削除して gradle build を実行しなおすことでビルドを実行できた。
わかってしまえば簡単な問題だけど、エラーメッセージが不親切だと時間を無駄にしてしまう事例だ。</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://blog.mahata.org/post/hello-world/</link>
      <pubDate>Tue, 09 May 2017 21:55:39 +0900</pubDate>
      
      <guid>https://blog.mahata.org/post/hello-world/</guid>
      <description>Hugo で静的なファイルをホストする実験です。
mahata.org のドメインを所有してはいたものの、ずっと活用していなかったので、これを機に使っていこうかと思案中。
Pygments によるハイライトも試しておこう。
int main() { return 0; }  </description>
    </item>
    
    <item>
      <title>ブログの移転</title>
      <link>https://blog.mahata.org/post/blog-migration/</link>
      <pubDate>Sun, 07 May 2017 22:12:03 +0900</pubDate>
      
      <guid>https://blog.mahata.org/post/blog-migration/</guid>
      <description>少し前まで WordPress でブログを管理していたけど、心機一転して自分のドメインでブログを再開することにしました。
今後ともどうぞよろしくお願いします。</description>
    </item>
    
  </channel>
</rss>